import os
import sys

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

from keras import Sequential
from keras.layers import Input, Dense, Dropout, Flatten
import tensorflow as tf
from sklearn.preprocessing import StandardScaler

tf.config.threading.set_inter_op_parallelism_threads(10)
from load_achsemat import load_achsemat as load_axis_data


# generate the neural network model based on the params dictionary generated by hyperopt
def generate_model(params):
    generated_model = Sequential()
    generated_model.add(Input(shape=(11, 2000)))

    n_layers = len(params['layers'])
    for n_layer in range(1, n_layers + 1):
        generated_model.add(Dense(params['layers']['layer_{}'.format(n_layer)]['n_units'],
                                  activation=params['layers']['layer_{}'.format(n_layer)]['activation'],
                                  use_bias=params.get('use_bias', None)))
        dropout_choice = params['layers']['layer_{}'.format(n_layer)]['dropout']['choice']
        dropout_rate = params['layers']['layer_{}'.format(n_layer)]['dropout'].get('dropout_rate', None)
        if dropout_choice:
            generated_model.add(Dropout(rate=dropout_rate))

    generated_model.add(Flatten())
    generated_model.add(Dense(1, activation='relu'))

    return generated_model
