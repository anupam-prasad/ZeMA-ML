function [trainData4D,trainTarget, lgraph, options] = prepareTrainNet()
%% *Selected training hyperparameters*

maxEpochs = 100;
miniBatchSize = 32;
learningRate = 0.0005;
L2 = 0.0001;
ValidationPatience = maxEpochs;
%% Define Network Architecture

net = MLPNetwork();
net.setHyperparameters('n_neurons', 1000, ...
    'depth',6,...
    'downsampleFactor', 1, ...
    'classification', false);
%% Load Image Data

load("ax11AllSensors.mat","trainData","trainTarget", "validationData", "validationTarget");

[lgraph, trainData4D, validationData4D] = net.prepareExperiment(trainTarget, trainData, validationData);
validationTarget = grp2idx(validationTarget);
trainTarget= grp2idx(trainTarget);

%% step by step without using prepareExperiment method
% trainData4D = net.reshapeData(trainData);
% trainTarget = trainTarget;
% validationData4D = net.reshapeData(validationData);
% validationTarget = validationTarget;
%
% net.outputDimention = length(unique(Ytrain));
% lgraph = net.buildGraph();  
%% Specify Training Options

validationFrequency = floor(length(trainTarget)/miniBatchSize);
options = trainingOptions('adam', ...
    'ExecutionEnvironment',"auto",...
    'InitialLearnRate',learningRate, ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.9, ...
    'LearnRateDropPeriod',1, ...
    'MaxEpochs',maxEpochs, ...
    'Shuffle','every-epoch', ...
    'Verbose',false, ...
    'L2Regularization',L2,...
    'MiniBatchSize',miniBatchSize, ...
    'GradientThreshold',1, ...
    'Plots','training-progress', ...
    'ValidationData',{validationData4D,validationTarget}, ...
    'ValidationFrequency',validationFrequency, ...
    "ValidationPatience",ValidationPatience);
end